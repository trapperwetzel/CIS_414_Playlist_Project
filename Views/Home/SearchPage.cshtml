<head>
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
</head>

@{
    ViewData["Title"] = "MainPage";
}

@model SearchViewModel

<div class="mainSearchBody">
    <div class="search-section animate__animated animate__fadeInDown">
        <h2 id="moodsTitleText"> Moods</h2>

        <!-- Search Form with an ID -->
        <form id="searchForm" asp-action="Search" method="post" class="search-form mb-4">
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="SearchTerm" class="form-label">Search Term</label>
                        <input asp-for="SearchTerm" class="form-control" placeholder="Enter song or artist name...">
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="Genre" class="form-label">Genre</label>
                        <select asp-for="Genre" class="form-control">
                            <option value="">-- Select Genre --</option>
                            @foreach (var genre in Model.AvailableGenres)
                            {
                                <option value="@genre">@genre</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="Mood" class="form-label">Mood</label>
                        <select asp-for="Mood" class="form-control">
                            <option value="">-- Select Mood --</option>
                            @foreach (var mood in Model.AvailableMoods)
                            {
                                <option value="@mood">@mood</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-3">Search</button>
        </form>

        <!-- Container for Search Results -->
        <div id="searchResults">
            @Html.Partial("_SearchResults", Model)
        </div>
    </div>
</div>

<div class="col-md-4">
    <div class="playlist-songs-container">
        <h3>Playlist</h3>
        <table class="table table-striped table-dark" id="selectedSongsTable">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Artist</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody id="selectedSongsList">
                <!-- Selected songs will be added here dynamically -->
            </tbody>
        </table>
        <button id="saveToPlaylist" class="btn btn-primary mt-3 w-100">
            Save to Playlist
        </button>
        <!-- Container for the Export button (appears once playlist is saved) -->
        <div id="playlistExport" style="margin-top: 10px;"></div>
    </div>
</div>

<!-- Message container -->
<div id="playlistMessage" style="margin-top:10px; font-weight:bold;"></div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Global variable to store the saved playlist ID
        let savedPlaylistId = null;
        // A Set to track songs that are selected but not yet saved (for initial creation)
        const selectedSongs = new Set();

        // Intercept search form submission
        $("#searchForm").on("submit", function (e) {
            e.preventDefault();
            $.ajax({
                type: "POST",
                url: $(this).attr("action"),
                data: $(this).serialize(),
                success: function (data) {
                    $("#searchResults").html(data);
                    // Rebind the add-to-playlist buttons after updating the search results
                    bindAddButtons();
                },
                error: function () {
                    alert("Error performing search.");
                }
            });
        });

        // Bind click events to add buttons for search results
        function bindAddButtons() {
            $(".add-to-playlist-button").off("click").on("click", function (e) {
                e.preventDefault();
                const songId = $(this).data("song-id");
                const songTitle = $(this).data("song-title");
                const songArtist = $(this).data("song-artist");

                // If the playlist is already saved, update database immediately
                if (savedPlaylistId) {
                    $.ajax({
                        url: '@Url.Action("AddSong", "Playlist")',
                        type: 'POST',
                        data: { playlistId: savedPlaylistId, songId: songId },
                        success: function (response) {
                            if (response.success) {
                                addSongToUI(songId, songTitle, songArtist);
                            } else {
                                alert("Error: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            alert("Error adding song: " + error);
                        }
                    });
                } else {
                    // For initial unsaved playlist, check if song already added
                    if (selectedSongs.has(songId)) {
                        alert("This song is already in your selection!");
                        return;
                    }
                    selectedSongs.add(songId);
                    addSongToUI(songId, songTitle, songArtist);
                }
            });
        }

        // Helper function to add song to the UI (both unsaved and saved playlists)
        function addSongToUI(songId, songTitle, songArtist) {
            const newRow = `
                <tr data-song-id="${songId}">
                    <td>${songTitle}</td>
                    <td>${songArtist}</td>
                    <td><button class="btn btn-danger btn-sm remove-song" data-song-id="${songId}">Remove</button></td>
                </tr>`;
            $("#selectedSongsList").append(newRow);
        }

        // Bind removal action (works for both saved and unsaved songs)
        $(document).on("click", ".remove-song", function () {
            const songId = $(this).data("song-id");
            if (savedPlaylistId) {
                $.ajax({
                    url: '@Url.Action("RemoveSong", "Playlist")',
                    type: 'POST',
                    data: { playlistId: savedPlaylistId, songId: songId },
                    success: function (response) {
                        if (response.success) {
                            $(this).closest("tr").remove();
                        } else {
                            alert("Error: " + response.message);
                        }
                    }.bind(this),
                    error: function (xhr, status, error) {
                        alert("Error removing song: " + error);
                    }
                });
            } else {
                // For unsaved playlist, just update the UI and temporary state
                selectedSongs.delete(songId);
                $(this).closest("tr").remove();
            }
        });

        // Save to Playlist functionality for initial creation
        $("#saveToPlaylist").on("click", function () {
            // If playlist is already saved, display message
            if (savedPlaylistId) {
                $("#playlistMessage").text("Playlist is already saved and can be edited below.");
                return;
            }
            if (selectedSongs.size === 0) {
                alert("Please select some songs first!");
                return;
            }
            const playlistName = prompt("Enter a name for your new playlist:");
            if (!playlistName) return;

            const songIds = Array.from(selectedSongs);
            $.ajax({
                url: '@Url.Action("SavePlaylist", "Playlist")',
                type: 'POST',
                data: { playlistName: playlistName, songIds: songIds },
                traditional: true,
                success: function (response) {
                    if (response.success) {
                        alert("Playlist saved successfully!");
                        // Store the saved playlist ID for future updates
                        savedPlaylistId = response.playlistId;
                        // Hide the Save button so the user doesn't try to save again
                        $("#saveToPlaylist").hide();
                        // Display a message informing the user that the playlist is now editable
                        $("#playlistMessage").text("Your playlist is saved and will now be automatically updated to your edits!");
                        // Add the "Save Playlist to File" button
                        $("#playlistExport").html(
                            '<a class="btn btn-secondary" href="@Url.Action("ExportPlaylist", "Playlist")?playlistId=' + savedPlaylistId + '">Save Playlist to File</a>'
                        );
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred while saving the playlist: " + error);
                }
            });
        });
    });
</script>